import type { VercelRequest, VercelResponse } from '@vercel/node';
import { applyCors, handleCorsPreflight } from './lib/cors.js';

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

export default async function handler(req: VercelRequest, res: VercelResponse) {
  if (handleCorsPreflight(req, res)) return;
  applyCors(req, res);
  
  if (req.method !== 'POST') {
    return res.status(405).json({ success: false, message: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
  }

  try {
    const data = req.body;
    const { name, phone, email, message, bestTime, projectType, area, budget, description, projectTitle, requestType } = data;
    
    if (!name || !phone) {
      return res.status(400).json({ success: false, message: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω)' });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    let text = '';
    if (requestType === 'callback') {
      text = `üìû –ó–ê–Ø–í–ö–ê –ù–ê –û–ë–†–ê–¢–ù–´–ô –ó–í–û–ù–û–ö\n\nüë§ –ò–º—è: ${name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n‚è∞ –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è: ${bestTime || '–õ—é–±–æ–µ –≤—Ä–µ–º—è'}\n\nüìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: ${new Date().toLocaleString('ru-RU')}\nüö® –°–†–û–ß–ù–û! –ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç`;
    } else if (requestType === 'quick_estimate') {
      text = `üßÆ –ó–ê–Ø–í–ö–ê –ù–ê –ë–´–°–¢–†–´–ô –†–ê–°–ß–ï–¢\n\nüë§ –ò–º—è: ${name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\nüèóÔ∏è –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: ${projectType || '–ù–µ —É–∫–∞–∑–∞–Ω'}\nüìê –ü–ª–æ—â–∞–¥—å: ${area || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} –º¬≤\nüí∞ –ë—é–¥–∂–µ—Ç: ${budget || '–ù–µ —É–∫–∞–∑–∞–Ω'}\nüè† –ü—Ä–æ–µ–∫—Ç: ${projectTitle || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\nüí¨ –ü–æ–∂–µ–ª–∞–Ω–∏—è:\n${description || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n\nüìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: ${new Date().toLocaleString('ru-RU')}\n‚ö° –ö–ª–∏–µ–Ω—Ç –∂–¥–µ—Ç —Ä–∞—Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!`;
    } else {
      text = `üîî –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –° –°–ê–ô–¢–ê\n\nüë§ –ò–º—è: ${name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n‚úâÔ∏è Email: ${email || '–ù–µ —É–∫–∞–∑–∞–Ω'}\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n‚è∞ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
      console.log('Missing Telegram tokens:', { TELEGRAM_BOT_TOKEN: !!TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID: !!TELEGRAM_CHAT_ID });
      return res.status(500).json({ success: false, message: 'Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
    }

    const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    
    const response = await fetch(TELEGRAM_API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text,
        parse_mode: 'HTML',
      }),
    });

    const tgData = await response.json();
    if (!tgData.ok) {
      console.log('Telegram API error:', tgData);
      return res.status(500).json({ success: false, message: tgData.description || '–û—à–∏–±–∫–∞ Telegram API' });
    }

    return res.status(200).json({ success: true, message: '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
  } catch (error: any) {
    console.log('API error:', error);
    return res.status(500).json({ success: false, message: error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
}
