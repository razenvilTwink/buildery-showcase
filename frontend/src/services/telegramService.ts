
/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –±–æ—Ç
 */

import { mockSendToTelegram } from './mockTelegramService';
import { isRequestSuspicious, sanitizeUserInput, createSpamProtectionId } from '@/utils/securityHelpers';

// –í—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–¥—É—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ backend API (–Ω–∏–∫–∞–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ)

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞—è–≤–æ–∫
export interface ContactFormData {
  name: string;
  phone: string;
  email: string;
  message: string;
}

export interface CallbackRequest {
  name: string;
  phone: string;
  bestTime?: string;
  requestType: 'callback';
}

export interface QuickEstimateRequest {
  name: string;
  phone: string;
  projectType?: string;
  area?: string;
  budget?: string;
  description?: string;
  projectTitle?: string;
  requestType: 'quick_estimate';
}

// –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
const requestLimits = new Map<string, { count: number; lastRequest: number }>();
const MAX_REQUESTS_PER_HOUR = 3;
const HOUR_IN_MS = 60 * 60 * 1000;

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
 */
const checkSpamProtection = (identifier: string): boolean => {
  const now = Date.now();
  const userRequests = requestLimits.get(identifier);

  if (!userRequests) {
    requestLimits.set(identifier, { count: 1, lastRequest: now });
    return true;
  }

  // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –ø—Ä–æ—à–µ–ª —á–∞—Å
  if (now - userRequests.lastRequest > HOUR_IN_MS) {
    requestLimits.set(identifier, { count: 1, lastRequest: now });
    return true;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
  if (userRequests.count >= MAX_REQUESTS_PER_HOUR) {
    return false;
  }

  userRequests.count++;
  userRequests.lastRequest = now;
  return true;
};

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
const validatePhone = (phone: string): boolean => {
  const phoneDigits = phone.replace(/\D/g, '');
  return phoneDigits.length === 11 && phoneDigits.startsWith('7');
};

/**
 * –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
 */
const sanitizeInput = (input: string): string => {
  return input
    .replace(/[<>]/g, '') // –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
    .replace(/javascript:/gi, '') // –£–¥–∞–ª—è–µ–º javascript:
    .replace(/on\w+=/gi, '') // –£–¥–∞–ª—è–µ–º event handlers
    .trim()
    .substring(0, 1000); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
 */
const formatTelegramMessage = (formData: ContactFormData): string => {
  return `
üîî –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –° –°–ê–ô–¢–ê

üë§ –ò–º—è: ${sanitizeInput(formData.name)}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${sanitizeInput(formData.phone)}
‚úâÔ∏è Email: ${sanitizeInput(formData.email) || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: 
${sanitizeInput(formData.message) || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

‚è∞ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}
üåê IP: –°–∫—Ä—ã—Ç (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
`;
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫
 */
const formatCallbackMessage = (request: CallbackRequest): string => {
  return `
üìû –ó–ê–Ø–í–ö–ê –ù–ê –û–ë–†–ê–¢–ù–´–ô –ó–í–û–ù–û–ö

üë§ –ò–º—è: ${sanitizeInput(request.name)}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${sanitizeInput(request.phone)}
‚è∞ –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è: ${request.bestTime || '–õ—é–±–æ–µ –≤—Ä–µ–º—è'}

üìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: ${new Date().toLocaleString('ru-RU')}
üö® –°–†–û–ß–ù–û! –ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç
`;
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
 */
const formatQuickEstimateMessage = (request: QuickEstimateRequest): string => {
  return `
üßÆ –ó–ê–Ø–í–ö–ê –ù–ê –ë–´–°–¢–†–´–ô –†–ê–°–ß–ï–¢

üë§ –ò–º—è: ${sanitizeInput(request.name)}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${sanitizeInput(request.phone)}
üèóÔ∏è –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: ${request.projectType || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìê –ü–ª–æ—â–∞–¥—å: ${request.area || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} –º¬≤
üí∞ –ë—é–¥–∂–µ—Ç: ${request.budget || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üè† –ü—Ä–æ–µ–∫—Ç: ${request.projectTitle || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üí¨ –ü–æ–∂–µ–ª–∞–Ω–∏—è:
${sanitizeInput(request.description || '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}

üìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: ${new Date().toLocaleString('ru-RU')}
‚ö° –ö–ª–∏–µ–Ω—Ç –∂–¥–µ—Ç —Ä–∞—Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!
`;
};

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram –±–æ—Ç
 * @param formData –î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
/**
 * –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
 */
const sendToTelegram = async (text: string, identifier: string): Promise<{ success: boolean; message: string }> => {
  // –û—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–ø–µ—Ä—å –∏–¥—ë—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ backend
  if (!checkSpamProtection(identifier)) {
    return { success: false, message: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' };
  }
  return { success: true, message: 'OK' };
};

// URL –¥–ª—è API (–±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
const BASE_URL = import.meta.env.VITE_API_BASE_URL || 'https://–≤–∞—à-api.vercel.app';
const API_URL = `${BASE_URL}/api/telegram`;

export const sendContactFormToTelegram = async (formData: ContactFormData): Promise<{ success: boolean; message: string }> => {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
  if (!validatePhone(formData.phone)) {
    return {
      success: false,
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
    };
  }
  if (!formData.name.trim()) {
    return {
      success: false,
      message: '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
    };
  }
  try {
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(formData),
    });
    return await response.json();
  } catch (error) {
    return {
      success: false,
      message: error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    };
  }
};

export const sendCallbackRequest = async (request: CallbackRequest): Promise<{ success: boolean; message: string }> => {
  if (!validatePhone(request.phone)) {
    return {
      success: false,
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
    };
  }
  if (!request.name.trim()) {
    return {
      success: false,
      message: '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
    };
  }
  try {
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(request),
    });
    return await response.json();
  } catch (error) {
    return {
      success: false,
      message: error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    };
  }
};

export const sendQuickEstimateRequest = async (request: QuickEstimateRequest): Promise<{ success: boolean; message: string }> => {
  if (!validatePhone(request.phone)) {
    return {
      success: false,
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
    };
  }
  if (!request.name.trim()) {
    return {
      success: false,
      message: '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
    };
  }
  try {
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(request),
    });
    return await response.json();
  } catch (error) {
    return {
      success: false,
      message: error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    };
  }
};
